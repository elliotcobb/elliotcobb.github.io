{"ast":null,"code":"import _classCallCheck from \"/Users/elliotcobb/Documents/projects/personal/stickyNoteMap/sticky-note-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/elliotcobb/Documents/projects/personal/stickyNoteMap/sticky-note-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/elliotcobb/Documents/projects/personal/stickyNoteMap/sticky-note-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/elliotcobb/Documents/projects/personal/stickyNoteMap/sticky-note-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/elliotcobb/Documents/projects/personal/stickyNoteMap/sticky-note-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/elliotcobb/Documents/projects/personal/stickyNoteMap/sticky-note-app/src/Sticky.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Sticky.css';\nvar INFO_WINDOW_WIDTH = 340;\nvar STICKY_WIDTH = 110;\nexport var Sticky =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Sticky, _Component);\n\n  function Sticky() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Sticky);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Sticky)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isOnRightHalfOfScreen: false\n    };\n    return _this;\n  }\n\n  _createClass(Sticky, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.isStickySelected === this.props.isStickySelected) {\n        return;\n      }\n\n      var centerOfStickyXAxis = this.props.xCoord + STICKY_WIDTH / 2;\n      var windowWidth = window.innerWidth;\n      var rightWindowBorderXCoord = window.pageXOffset + windowWidth;\n      var distanceToRightWindowBorder = rightWindowBorderXCoord - centerOfStickyXAxis;\n      var isOnRightHalfOfScreen = distanceToRightWindowBorder < windowWidth / 2;\n      this.setState({\n        isOnRightHalfOfScreen: isOnRightHalfOfScreen\n      }); // const infoWindowXCoord = isOnRightHalfOfScreen ? -INFO_WINDOW_WIDTH : STICKY_WIDTH;\n      // this.setState({\n      //   infoWindowStyle: {\n      //     left: `${infoWindowXCoord}px`,\n      //   }\n      // });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          isStickySelected = _this$props.isStickySelected,\n          onClick = _this$props.onClick,\n          onMouseLeave = _this$props.onMouseLeave,\n          xCoord = _this$props.xCoord,\n          yCoord = _this$props.yCoord;\n      var isOnRightHalfOfScreen = this.state.isOnRightHalfOfScreen;\n      return React.createElement(\"div\", {\n        className: \"sticky\",\n        onClick: onClick,\n        onMouseLeave: onMouseLeave,\n        style: {\n          left: xCoord,\n          top: yCoord\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          position: 'relative'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"sticky-infoWindow \".concat(isStickySelected ? 'sticky-infoWindow--visible' : ''),\n        style: {\n          marginRight: isOnRightHalfOfScreen ? -INFO_WINDOW_WIDTH : STICKY_WIDTH\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"sticky-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, children))));\n    }\n  }]);\n\n  return Sticky;\n}(Component);\nSticky.propTypes = {\n  children: PropTypes.node.isRequired,\n  isStickySelected: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired,\n  onMouseLeave: PropTypes.func.isRequired,\n  xCoord: PropTypes.number.isRequired,\n  yCoord: PropTypes.number.isRequired\n};\nexport default Sticky;","map":{"version":3,"sources":["/Users/elliotcobb/Documents/projects/personal/stickyNoteMap/sticky-note-app/src/Sticky.js"],"names":["React","Component","PropTypes","INFO_WINDOW_WIDTH","STICKY_WIDTH","Sticky","state","isOnRightHalfOfScreen","prevProps","isStickySelected","props","centerOfStickyXAxis","xCoord","windowWidth","window","innerWidth","rightWindowBorderXCoord","pageXOffset","distanceToRightWindowBorder","setState","children","onClick","onMouseLeave","yCoord","left","top","position","marginRight","propTypes","node","isRequired","bool","func","number"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAO,cAAP;AAEA,IAAMC,iBAAiB,GAAG,GAA1B;AACA,IAAMC,YAAY,GAAG,GAArB;AAEA,WAAaC,MAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,UAUEC,KAVF,GAUU;AACNC,MAAAA,qBAAqB,EAAE;AADjB,KAVV;AAAA;AAAA;;AAAA;AAAA;AAAA,uCAcqBC,SAdrB,EAcgC;AAC5B,UAAIA,SAAS,CAACC,gBAAV,KAA+B,KAAKC,KAAL,CAAWD,gBAA9C,EAAgE;AAC9D;AACD;;AAED,UAAME,mBAAmB,GAAG,KAAKD,KAAL,CAAWE,MAAX,GAAoBR,YAAY,GAAC,CAA7D;AACA,UAAMS,WAAW,GAAGC,MAAM,CAACC,UAA3B;AACA,UAAMC,uBAAuB,GAAGF,MAAM,CAACG,WAAP,GAAqBJ,WAArD;AACA,UAAMK,2BAA2B,GAAGF,uBAAuB,GAAGL,mBAA9D;AACA,UAAMJ,qBAAqB,GAAGW,2BAA2B,GAAGL,WAAW,GAAC,CAAxE;AACA,WAAKM,QAAL,CAAc;AAACZ,QAAAA,qBAAqB,EAArBA;AAAD,OAAd,EAV4B,CAY5B;AACA;AACA;AACA;AACA;AACA;AACD;AAhCH;AAAA;AAAA,6BAkCW;AAAA,wBAQH,KAAKG,KARF;AAAA,UAELU,QAFK,eAELA,QAFK;AAAA,UAGLX,gBAHK,eAGLA,gBAHK;AAAA,UAILY,OAJK,eAILA,OAJK;AAAA,UAKLC,YALK,eAKLA,YALK;AAAA,UAMLV,MANK,eAMLA,MANK;AAAA,UAOLW,MAPK,eAOLA,MAPK;AAAA,UASAhB,qBATA,GASyB,KAAKD,KAT9B,CASAC,qBATA;AAUP,aACE;AACE,QAAA,SAAS,EAAC,QADZ;AAEE,QAAA,OAAO,EAAEc,OAFX;AAGE,QAAA,YAAY,EAAEC,YAHhB;AAIE,QAAA,KAAK,EAAE;AAACE,UAAAA,IAAI,EAAEZ,MAAP;AAAea,UAAAA,GAAG,EAAEF;AAApB,SAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAME;AAAK,QAAA,KAAK,EAAE;AAACG,UAAAA,QAAQ,EAAE;AAAX,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,SAAS,8BAAuBjB,gBAAgB,GAAG,4BAAH,GAAkC,EAAzE,CADX;AAEE,QAAA,KAAK,EAAE;AAACkB,UAAAA,WAAW,EAAEpB,qBAAqB,GAAG,CAACJ,iBAAJ,GAAwBC;AAA3D,SAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIE;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGgB,QADH,CAJF,CADF,CANF,CADF;AAmBD;AA/DH;;AAAA;AAAA,EAA4BnB,SAA5B;AAAaI,M,CACJuB,S,GAAY;AACjBR,EAAAA,QAAQ,EAAElB,SAAS,CAAC2B,IAAV,CAAeC,UADR;AAEjBrB,EAAAA,gBAAgB,EAAEP,SAAS,CAAC6B,IAAV,CAAeD,UAFhB;AAGjBT,EAAAA,OAAO,EAAEnB,SAAS,CAAC8B,IAAV,CAAeF,UAHP;AAIjBR,EAAAA,YAAY,EAAEpB,SAAS,CAAC8B,IAAV,CAAeF,UAJZ;AAKjBlB,EAAAA,MAAM,EAAEV,SAAS,CAAC+B,MAAV,CAAiBH,UALR;AAMjBP,EAAAA,MAAM,EAAErB,SAAS,CAAC+B,MAAV,CAAiBH;AANR,C;AAiErB,eAAezB,MAAf","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Sticky.css';\n\nconst INFO_WINDOW_WIDTH = 340;\nconst STICKY_WIDTH = 110;\n\nexport class Sticky extends Component {\n  static propTypes = {\n    children: PropTypes.node.isRequired,\n    isStickySelected: PropTypes.bool.isRequired,\n    onClick: PropTypes.func.isRequired,\n    onMouseLeave: PropTypes.func.isRequired,\n    xCoord: PropTypes.number.isRequired,\n    yCoord: PropTypes.number.isRequired,\n  }\n\n  state = {\n    isOnRightHalfOfScreen: false,\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.isStickySelected === this.props.isStickySelected) {\n      return;\n    }\n\n    const centerOfStickyXAxis = this.props.xCoord + STICKY_WIDTH/2; \n    const windowWidth = window.innerWidth;\n    const rightWindowBorderXCoord = window.pageXOffset + windowWidth;\n    const distanceToRightWindowBorder = rightWindowBorderXCoord - centerOfStickyXAxis;\n    const isOnRightHalfOfScreen = distanceToRightWindowBorder < windowWidth/2;\n    this.setState({isOnRightHalfOfScreen});\n\n    // const infoWindowXCoord = isOnRightHalfOfScreen ? -INFO_WINDOW_WIDTH : STICKY_WIDTH;\n    // this.setState({\n    //   infoWindowStyle: {\n    //     left: `${infoWindowXCoord}px`,\n    //   }\n    // });\n  }\n\n  render() {\n    const {\n      children,\n      isStickySelected,\n      onClick,\n      onMouseLeave,\n      xCoord,\n      yCoord,\n    } = this.props;\n    const {isOnRightHalfOfScreen} = this.state;\n    return (\n      <div\n        className=\"sticky\"\n        onClick={onClick}\n        onMouseLeave={onMouseLeave}\n        style={{left: xCoord, top: yCoord}}\n      >\n        <div style={{position: 'relative'}}>\n          <div\n            className={`sticky-infoWindow ${isStickySelected ? 'sticky-infoWindow--visible' : ''}`}\n            style={{marginRight: isOnRightHalfOfScreen ? -INFO_WINDOW_WIDTH : STICKY_WIDTH}}\n          >\n            <div className=\"sticky-content\">\n              {children}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Sticky;\n"]},"metadata":{},"sourceType":"module"}